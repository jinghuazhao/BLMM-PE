// Code generated by Stan version 2.8

#include <stan/model/model_header.hpp>

namespace meyer_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
class meyer_model : public prob_grad {
private:
    int N;
    vector_d y;
    vector_d g1;
    vector_d g2;
    matrix_d G;
    matrix_d C;
public:
    meyer_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "meyer_model_namespace::meyer_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        validate_non_negative_index("y", "N", N);
        y = vector_d(N);
        context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
            y[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("g1", "N", N);
        g1 = vector_d(N);
        context__.validate_dims("data initialization", "g1", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("g1");
        pos__ = 0;
        size_t g1_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < g1_i_vec_lim__; ++i_vec__) {
            g1[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("g2", "N", N);
        g2 = vector_d(N);
        context__.validate_dims("data initialization", "g2", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("g2");
        pos__ = 0;
        size_t g2_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < g2_i_vec_lim__; ++i_vec__) {
            g2[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "G", "matrix_d", context__.to_vec(N,N));
        validate_non_negative_index("G", "N", N);
        validate_non_negative_index("G", "N", N);
        G = matrix_d(N,N);
        vals_r__ = context__.vals_r("G");
        pos__ = 0;
        size_t G_m_mat_lim__ = N;
        size_t G_n_mat_lim__ = N;
        for (size_t n_mat__ = 0; n_mat__ < G_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < G_m_mat_lim__; ++m_mat__) {
                G(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate data
        validate_non_negative_index("C", "N", N);
        validate_non_negative_index("C", "N", N);
        C = matrix_d(N,N);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(C,DUMMY_VAR__);

        try {
            current_statement_begin__ = 12;
            stan::math::assign(C, cholesky_decompose(G));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += 2;
        num_params_r__ += N;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~meyer_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "vector_d", context__.to_vec(2));
        vector_d b(2);
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("z")))
            throw std::runtime_error("variable z missing");
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        context__.validate_dims("initialization", "z", "vector_d", context__.to_vec(N));
        vector_d z(N);
        for (int j1__ = 0U; j1__ < N; ++j1__)
            z(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z: ") + e.what());
        }

        if (!(context__.contains_r("sigma_p2")))
            throw std::runtime_error("variable sigma_p2 missing");
        vals_r__ = context__.vals_r("sigma_p2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_p2", "double", context__.to_vec());
        double sigma_p2(0);
        sigma_p2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(sigma_p2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_p2: ") + e.what());
        }

        if (!(context__.contains_r("sigma_r2")))
            throw std::runtime_error("variable sigma_r2 missing");
        vals_r__ = context__.vals_r("sigma_r2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_r2", "double", context__.to_vec());
        double sigma_r2(0);
        sigma_r2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(sigma_r2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_r2: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b;
        (void) b;   // dummy to suppress unused var warning
        if (jacobian__)
            b = in__.vector_constrain(2,lp__);
        else
            b = in__.vector_constrain(2);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z;
        (void) z;   // dummy to suppress unused var warning
        if (jacobian__)
            z = in__.vector_constrain(N,lp__);
        else
            z = in__.vector_constrain(N);

        T__ sigma_p2;
        (void) sigma_p2;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma_p2 = in__.scalar_constrain(lp__);
        else
            sigma_p2 = in__.scalar_constrain();

        T__ sigma_r2;
        (void) sigma_r2;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma_r2 = in__.scalar_constrain(lp__);
        else
            sigma_r2 = in__.scalar_constrain();


        // transformed parameters
        T__ sigma_p;
        (void) sigma_p;  // dummy to suppress unused var warning
        T__ sigma_r;
        (void) sigma_r;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  g(N);
        (void) g;  // dummy to suppress unused var warning
        stan::math::fill(g,DUMMY_VAR__);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(sigma_p,DUMMY_VAR__);
        stan::math::fill(sigma_r,DUMMY_VAR__);
        stan::math::fill(g,DUMMY_VAR__);

        try {
            current_statement_begin__ = 24;
            stan::math::assign(sigma_p, sqrt(sigma_p2));
            current_statement_begin__ = 25;
            stan::math::assign(sigma_r, sqrt(sigma_r2));
            current_statement_begin__ = 26;
            stan::math::assign(g, multiply(multiply(sigma_p,C),z));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        if (stan::math::is_uninitialized(sigma_p)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: sigma_p";
            throw std::runtime_error(msg__.str());
        }
        if (stan::math::is_uninitialized(sigma_r)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: sigma_r";
            throw std::runtime_error(msg__.str());
        }
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(g(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: g" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log<propto__>(b, 0, 1000));
            current_statement_begin__ = 30;
            lp_accum__.add(inv_gamma_log<propto__>(sigma_p2, 0.001, 0.001));
            current_statement_begin__ = 31;
            lp_accum__.add(inv_gamma_log<propto__>(sigma_r2, 0.001, 0.001));
            current_statement_begin__ = 32;
            lp_accum__.add(normal_log<propto__>(z, 0, 1));
            current_statement_begin__ = 33;
            lp_accum__.add(normal_log<propto__>(y, add(add(multiply(get_base1(b,1,"b",1),g1),multiply(get_base1(b,2,"b",1),g2)),g), sigma_r));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b");
        names__.push_back("z");
        names__.push_back("sigma_p2");
        names__.push_back("sigma_r2");
        names__.push_back("sigma_p");
        names__.push_back("sigma_r");
        names__.push_back("g");
        names__.push_back("h2");
        names__.push_back("p");
        names__.push_back("r");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "meyer_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d b = in__.vector_constrain(2);
        vector_d z = in__.vector_constrain(N);
        double sigma_p2 = in__.scalar_constrain();
        double sigma_r2 = in__.scalar_constrain();
        for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(z[k_0__]);
        }
        vars__.push_back(sigma_p2);
        vars__.push_back(sigma_r2);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double sigma_p(0.0);
        (void) sigma_p;  // dummy to suppress unused var warning
        double sigma_r(0.0);
        (void) sigma_r;  // dummy to suppress unused var warning
        vector_d g(N);
        (void) g;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 24;
            stan::math::assign(sigma_p, sqrt(sigma_p2));
            current_statement_begin__ = 25;
            stan::math::assign(sigma_r, sqrt(sigma_r2));
            current_statement_begin__ = 26;
            stan::math::assign(g, multiply(multiply(sigma_p,C),z));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        vars__.push_back(sigma_p);
        vars__.push_back(sigma_r);
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(g[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        double h2(0.0);
        (void) h2;  // dummy to suppress unused var warning
        double p(0.0);
        (void) p;  // dummy to suppress unused var warning
        double r(0.0);
        (void) r;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(h2,DUMMY_VAR__);
        stan::math::fill(p,DUMMY_VAR__);
        stan::math::fill(r,DUMMY_VAR__);

        try {
            current_statement_begin__ = 39;
            stan::math::assign(p, sigma_p2);
            current_statement_begin__ = 40;
            stan::math::assign(r, sigma_r2);
            current_statement_begin__ = 41;
            stan::math::assign(h2, (p / (p + r)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        vars__.push_back(h2);
        vars__.push_back(p);
        vars__.push_back(r);

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "meyer_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_p2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_r2";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_p";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_r";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_p2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_r2";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_p";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_r";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

} // namespace

typedef meyer_model_namespace::meyer_model stan_model;

